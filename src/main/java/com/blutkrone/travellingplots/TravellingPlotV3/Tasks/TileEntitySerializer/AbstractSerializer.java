package com.blutkrone.travellingplots.TravellingPlotV3.Tasks.TileEntitySerializer;

import com.blutkrone.travellingplots.TravellingPlotV3.Implemented.TIOHandler;
import org.bukkit.block.BlockState;
import org.nustaq.serialization.FSTObjectInput;

import java.io.ByteArrayInputStream;
import java.io.IOException;

public abstract class AbstractSerializer<T extends BlockState> {

    private final TIOHandler ioHandler;

    public AbstractSerializer(TIOHandler ioHandler) {
        this.ioHandler = ioHandler;
    }

    public TIOHandler getIoHandler() {
        return ioHandler;
    }

    protected <K extends AbstractData> K loadData(byte[] data, Class<K> clazz) {
        try {
            FSTObjectInput input = new FSTObjectInput(new ByteArrayInputStream(data));
            return (K) input.readObject();
        } catch (ClassNotFoundException | IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Which class do we expect to be handled by this serializer
     * implementation
     *
     * @return class which will be serialized through this implementation.
     */
    public abstract Class<T> getTargetClass();

    /**
     * @param state the serialized state which we are dealing with.
     * @return a byte array representing a deserialized implementation.
     */
    public abstract byte[] deserialize(T state);

    /**
     * Serialize the previously generated byte array.
     *
     * @param state        the state which we will modify to conform with
     *                     our expected changes
     * @param deserialized a previously generated byte array which
     *                     can recover the state of a block state.
     * @throws Exception an exception may be thrown if we fail to recover
     *                   the state of the block.
     */
    public abstract void serialize(T state, byte[] deserialized) throws Exception;

}
